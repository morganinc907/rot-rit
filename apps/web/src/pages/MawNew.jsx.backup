import React, { useMemo, useState, useCallback } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { toast } from "react-hot-toast";
import { useAccount } from "wagmi";

import useNFTBalances from "../hooks/useNFTBalancesSDK";
import useCultists from "../hooks/useCultists";
import { useMawSacrificeSDK } from "../hooks/useMawSacrificeSDK";

/**
 * MawGameUI
 * - Full-bleed static background image of the Maw
 * - "Game HUD" layout:
 *   - Relics belt across the bottom (keys, fragments, masks, daggers, vials, etc.)
 *   - Cosmetics/boosters rail on the right (masks, vials, contracts, deeds)
 *   - Cultist selector on the left (when summoning demons)
 *   - Top-center offering summary + computed success chance
 *   - Bottom-center "FINAL SACRIFICE" button
 * - Reward modal pops in the center, inventories refresh automatically
 *
 * Drop your static background at /public/images/maw-bg.jpg (or edit BACKGROUND_URL below).
 */

const BACKGROUND_URL = "/images/maw-bg.PNG";

// Item IDs (must match backend / hook semantics)
const ITEM = {
  KEYS: 1,              // Rusted Keys
  FRAGMENT: 2,          // Lantern Fragment
  MASK: 3,              // Worm-eaten Mask
  DAGGER: 4,            // Bone Dagger
  VIAL: 5,              // Ash Vial
  CONTRACT: 6,          // Binding Contract (boolean in API)
  DEED: 7,              // Soul Deed (boolean in API)
  ASH: 8,               // Ash piles (not used directly in this UI)
};

const prettyName = {
  [ITEM.KEYS]: "Rusted Key",
  [ITEM.FRAGMENT]: "Lantern Fragment",
  [ITEM.MASK]: "Worm-eaten Mask",
  [ITEM.DAGGER]: "Bone Dagger",
  [ITEM.VIAL]: "Ash Vial",
  [ITEM.CONTRACT]: "Binding Contract",
  [ITEM.DEED]: "Soul Deed",
  [ITEM.ASH]: "Ash",
};

const emoji = {
  [ITEM.KEYS]: "🗝️",
  [ITEM.FRAGMENT]: "💡",
  [ITEM.MASK]: "😷",
  [ITEM.DAGGER]: "🗡️",
  [ITEM.VIAL]: "🧪",
  [ITEM.CONTRACT]: "📜",
  [ITEM.DEED]: "💀📜",
  [ITEM.ASH]: "🌫️",
};

// Item images - fallback to emoji if image not found
const itemImages = {
  [ITEM.KEYS]: "/images/items/rusted-key.png",
  [ITEM.FRAGMENT]: "/images/items/lantern-fragment.png", 
  [ITEM.MASK]: "/images/items/worm-eaten-mask.png",
  [ITEM.DAGGER]: "/images/items/bone-dagger.png",
  [ITEM.VIAL]: "/images/items/ash-vial.png",
  [ITEM.CONTRACT]: "/images/items/bindiing-contract.png",
  [ITEM.DEED]: "/images/items/soul-deed.png",
  [ITEM.ASH]: "/images/items/ash.png",
};

// Success chance helpers (mirror prior logic)
const getCosmeticSuccessChance = (frags) => {
  if (frags === 1) return 35;
  if (frags === 2) return 60;
  if (frags === 3) return 80;
  return 0;
};

const getDemonSuccessChance = (dags) => {
  if (dags === 1) return 10;
  if (dags === 2) return 20;
  if (dags === 3) return 30;
  return 0;
};

// Simple counter control component with RPG styling
function Counter({ value, min = 0, max = 99, onChange, disabled }) {
  const dec = () => onChange(Math.max(min, (value || 0) - 1));
  const inc = () => onChange(Math.min(max, (value || 0) + 1));

  return (
    <div className="flex items-center gap-1">
      <button
        onClick={dec}
        disabled={disabled || value <= min}
        className="w-6 h-6 rounded text-xs font-bold transition-all duration-150 disabled:opacity-50"
        style={{
          background: 'linear-gradient(145deg, rgba(139, 69, 19, 0.8), rgba(101, 67, 33, 0.8))',
          border: '1px solid rgba(205, 133, 63, 0.4)',
          color: '#f3e8aa',
          textShadow: '0 1px 2px rgba(0, 0, 0, 0.8)',
          boxShadow: '0 1px 3px rgba(0, 0, 0, 0.5), inset 0 1px 0 rgba(255, 255, 255, 0.1)',
        }}
        onMouseEnter={(e) => {
          if (!disabled && value > min) {
            e.target.style.background = 'linear-gradient(145deg, rgba(160, 82, 45, 0.9), rgba(139, 69, 19, 0.9))';
          }
        }}
        onMouseLeave={(e) => {
          e.target.style.background = 'linear-gradient(145deg, rgba(139, 69, 19, 0.8), rgba(101, 67, 33, 0.8))';
        }}
      >
        −
      </button>
      <div 
        className="w-8 text-center font-bold text-xs"
        style={{
          color: '#f3e8aa',
          textShadow: '0 1px 2px rgba(0, 0, 0, 0.8)',
        }}
      >
        {value || 0}
      </div>
      <button
        onClick={inc}
        disabled={disabled || value >= max}
        className="w-6 h-6 rounded text-xs font-bold transition-all duration-150 disabled:opacity-50"
        style={{
          background: 'linear-gradient(145deg, rgba(139, 69, 19, 0.8), rgba(101, 67, 33, 0.8))',
          border: '1px solid rgba(205, 133, 63, 0.4)',
          color: '#f3e8aa',
          textShadow: '0 1px 2px rgba(0, 0, 0, 0.8)',
          boxShadow: '0 1px 3px rgba(0, 0, 0, 0.5), inset 0 1px 0 rgba(255, 255, 255, 0.1)',
        }}
        onMouseEnter={(e) => {
          if (!disabled && value < max) {
            e.target.style.background = 'linear-gradient(145deg, rgba(160, 82, 45, 0.9), rgba(139, 69, 19, 0.9))';
          }
        }}
        onMouseLeave={(e) => {
          e.target.style.background = 'linear-gradient(145deg, rgba(139, 69, 19, 0.8), rgba(101, 67, 33, 0.8))';
        }}
      >
        +
      </button>
    </div>
  );
}

function RailCard({
  title,
  subtitle,
  icon,
  itemId,
  owned = 0,
  value = 0,
  onChange,
  disabled,
  highlight = false,
}) {
  const [imageError, setImageError] = useState(false);
  const imageSrc = itemImages[itemId];
  const shouldShowImage = imageSrc && !imageError;

  return (
    <div
      className={`rounded-xl p-3 border backdrop-blur-md min-w-[160px] transition-all duration-200 ${
        highlight 
          ? "bg-gradient-to-br from-purple-900/90 to-blue-900/90 border-purple-400/60 shadow-lg shadow-purple-500/25" 
          : "bg-black/90 border-amber-600/50 hover:border-amber-500/70"
      }`}
      style={{
        backgroundImage: highlight ? 'none' : 'linear-gradient(145deg, rgba(139, 69, 19, 0.1), rgba(101, 67, 33, 0.1))',
        boxShadow: highlight 
          ? '0 0 20px rgba(147, 51, 234, 0.3), inset 0 1px 0 rgba(255, 255, 255, 0.1)'
          : '0 2px 8px rgba(0, 0, 0, 0.3), inset 0 1px 0 rgba(205, 133, 63, 0.2), inset 0 -1px 0 rgba(101, 67, 33, 0.3)'
      }}
    >
      {/* Item Icon/Image */}
      <div className="flex items-center justify-center mb-2" style={{ height: '60px' }}>
        {shouldShowImage ? (
          <img
            src={imageSrc}
            alt={title}
            style={{ 
              width: '56px', 
              height: '56px', 
              objectFit: 'contain',
              imageRendering: 'crisp-edges',
              filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.5))'
            }}
            onError={() => setImageError(true)}
          />
        ) : (
          <div style={{ fontSize: '48px', filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.5))' }}>{icon}</div>
        )}
      </div>
      
      {/* Item Name */}
      <div className="text-center mb-1">
        <div className="font-semibold text-sm text-amber-100">{title}</div>
        {subtitle && (
          <div className="text-xs text-amber-200/70 mb-2">{subtitle}</div>
        )}
      </div>
      
      {/* Owned Count */}
      <div className="text-center mb-2">
        <div className="text-xs text-amber-300/80 font-medium">Owned: {owned}</div>
      </div>
      
      {/* Counter */}
      <div className="flex justify-center">
        <Counter
          value={value}
          min={0}
          max={owned}
          disabled={disabled}
          onChange={onChange}
        />
      </div>
    </div>
  );
}

function ToggleCard({
  title,
  subtitle,
  icon,
  itemId,
  owned = 0,
  checked = false,
  onToggle,
  disabled,
}) {
  const [imageError, setImageError] = useState(false);
  const imageSrc = itemImages[itemId];
  const shouldShowImage = imageSrc && !imageError;

  return (
    <button
      onClick={() => onToggle(!checked)}
      disabled={disabled || owned <= 0}
      className={`text-left rounded-xl p-3 border backdrop-blur-md min-w-[160px] transition-all duration-200
        ${
          checked
            ? "bg-gradient-to-br from-amber-900/90 to-yellow-900/90 border-amber-400/70 ring-2 ring-amber-400/30 shadow-lg shadow-amber-500/25"
            : "bg-black/90 border-amber-600/50 hover:border-amber-500/70"
        }
        disabled:opacity-50`}
      style={{
        backgroundImage: checked ? 'none' : 'linear-gradient(145deg, rgba(139, 69, 19, 0.1), rgba(101, 67, 33, 0.1))',
        boxShadow: checked 
          ? '0 0 20px rgba(245, 158, 11, 0.3), inset 0 1px 0 rgba(255, 255, 255, 0.1)'
          : '0 2px 8px rgba(0, 0, 0, 0.3), inset 0 1px 0 rgba(205, 133, 63, 0.2), inset 0 -1px 0 rgba(101, 67, 33, 0.3)'
      }}
    >
      {/* Item Icon/Image */}
      <div className="flex items-center justify-center mb-2" style={{ height: '60px' }}>
        {shouldShowImage ? (
          <img
            src={imageSrc}
            alt={title}
            style={{ 
              width: '56px', 
              height: '56px', 
              objectFit: 'contain',
              imageRendering: 'crisp-edges',
              filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.5))'
            }}
            onError={() => setImageError(true)}
          />
        ) : (
          <div style={{ fontSize: '48px', filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.5))' }}>{icon}</div>
        )}
      </div>
      
      {/* Item Name */}
      <div className="text-center mb-1">
        <div className="font-semibold text-sm text-amber-100">{title}</div>
        {subtitle && (
          <div className="text-xs text-amber-200/70 mb-2">{subtitle}</div>
        )}
      </div>
      
      {/* Status */}
      <div className="text-center">
        <div className="text-xs font-medium">
          <span className="text-amber-300/80">Owned: {owned}</span>
          <span className="mx-2 text-amber-600">•</span>
          <span className={checked ? "text-green-400" : "text-gray-400"}>
            {checked ? "Enabled" : "Disabled"}
          </span>
        </div>
      </div>
    </button>
  );
}

function CultistPicker({ cultists, selected, onSelect }) {
  return (
    <div className="space-y-3">
      <div className="text-sm text-red-300 font-semibold">Cultist to Sacrifice</div>
      <div className="rounded-xl bg-black/40 border border-white/10 p-3 backdrop-blur-md">
        {selected ? (
          <div className="flex items-center gap-3">
            <img
              src={selected.image}
              alt={selected.name}
              className="w-12 h-12 rounded object-cover"
            />
            <div className="text-sm">
              <div className="font-semibold">{selected.name}</div>
              <div className="text-gray-400">Token #{selected.id}</div>
            </div>
            <button
              onClick={() => onSelect(null)}
              className="ml-auto px-3 py-1 text-sm bg-gray-700 hover:bg-gray-600 rounded"
            >
              Remove
            </button>
          </div>
        ) : (
          <div>
            <div className="text-xs text-gray-300 mb-3">
              Select one to proceed with demon rituals.
            </div>
            <div className="grid grid-cols-2 gap-2">
              {cultists.slice(0, 6).map((c) => (
                <button
                  key={c.id}
                  onClick={() => onSelect(c)}
                  className="rounded-lg p-2 bg-gray-800/60 hover:bg-gray-700/70 transition border border-white/10"
                >
                  <img
                    src={c.image}
                    alt={c.name}
                    className="w-full h-16 object-cover rounded mb-1"
                  />
                  <div className="text-xs font-semibold">{c.name || "Cultist"}</div>
                  <div className="text-[10px] text-gray-400">#{c.id}</div>
                </button>
              ))}
            </div>
            {cultists.length === 0 && (
              <div className="text-xs text-gray-400">No cultists available.</div>
            )}
          </div>
        )}
      </div>
    </div>
  );
}

export default function MawGameUI() {
  const { isConnected } = useAccount();

  const { relics, loading: relicsLoading, refetch: refetchRelics } = useNFTBalances();
  const { cultists, loading: cultistsLoading, refetch: refetchCultists } = useCultists();

  // Reward modal state
  const [showResultsModal, setShowResultsModal] = useState(false);
  const [lastSacrificeResult, setLastSacrificeResult] = useState(null);

  // Selection state
  const [selected, setSelected] = useState({
    [ITEM.KEYS]: 0,
    [ITEM.FRAGMENT]: 0,
    [ITEM.MASK]: 0,
    [ITEM.DAGGER]: 0,
    [ITEM.VIAL]: 0,
  });
  const [useBindingContract, setUseBindingContract] = useState(false);
  const [useSoulDeed, setUseSoulDeed] = useState(false);
  const [selectedCultist, setSelectedCultist] = useState(null);

  const handleSacrificeComplete = useCallback(
    (result) => {
      console.log('🎯 Sacrifice completed with result:', result);
      setLastSacrificeResult(result);
      setShowResultsModal(true);
      // Refresh inventories after outcome so HUD updates
      refetchRelics();
      refetchCultists();
      // Clear selection for next attempt
      setSelected({
        [ITEM.KEYS]: 0,
        [ITEM.FRAGMENT]: 0,
        [ITEM.MASK]: 0,
        [ITEM.DAGGER]: 0,
        [ITEM.VIAL]: 0,
      });
      setUseBindingContract(false);
      setUseSoulDeed(false);
      setSelectedCultist(null);
    },
    [refetchRelics, refetchCultists]
  );

  const {
    sacrificeKeys,
    sacrificeForCosmetic,
    sacrificeForDemon,
    approveContract,
    isApproved,
    refetchApproval,
    isLoading,
  } = useMawSacrificeSDK(handleSacrificeComplete);

  const getRelicBalance = useCallback(
    (id) => {
      if (!Array.isArray(relics) || relics.length === 0) return 0;
      const r = relics.find((x) => Number(x.id) === Number(id));
      return r ? Number(r.quantity || 0) : 0;
    },
    [relics]
  );

  // Helper to update selected counts
  const setCount = useCallback(
    (id, count) => {
      setSelected((prev) => ({ ...prev, [id]: Math.max(0, count || 0) }));
    },
    [setSelected]
  );

  // Ritual decision + validation
  const ritual = useMemo(() => {
    const keys = selected[ITEM.KEYS] || 0;
    const frags = selected[ITEM.FRAGMENT] || 0;
    const masks = selected[ITEM.MASK] || 0;
    const dags = selected[ITEM.DAGGER] || 0;
    const vials = selected[ITEM.VIAL] || 0;

    const hasDemonIntent =
      !!selectedCultist ||
      useBindingContract ||
      useSoulDeed ||
      dags > 0 ||
      vials > 0;

    let type = null;
    if (hasDemonIntent) type = "demon";
    else if (frags > 0 || masks > 0) type = "cosmetic";
    else if (keys > 0) type = "keys";

    // Validate based on type
    let valid = false;
    let reason = "";

    if (type === "keys") {
      valid = keys > 0 && keys <= getRelicBalance(ITEM.KEYS);
      if (!valid) reason = keys <= 0 ? "Select at least 1 key." : "Not enough keys.";
    }

    if (type === "cosmetic") {
      const total = frags + masks;
      if (frags <= 0) {
        reason = "Need at least 1 fragment.";
      } else if (total > 3) {
        reason = "Max 3 relics total (fragments + masks).";
      } else if (frags > getRelicBalance(ITEM.FRAGMENT)) {
        reason = "Not enough fragments.";
      } else if (masks > getRelicBalance(ITEM.MASK)) {
        reason = "Not enough masks.";
      } else {
        valid = true;
      }
    }

    if (type === "demon") {
      if (!selectedCultist) {
        reason = "Select a cultist.";
      } else if (useSoulDeed && getRelicBalance(ITEM.DEED) <= 0) {
        reason = "No Soul Deed owned.";
      } else if (useBindingContract && getRelicBalance(ITEM.CONTRACT) <= 0) {
        reason = "No Binding Contract owned.";
      } else if (useSoulDeed && useBindingContract) {
        reason = "Choose only one: Deed or Contract.";
      } else if (useSoulDeed || useBindingContract) {
        // Contracts are exclusive; ignore daggers/vials, but warn if user tried to set them
        if (dags > 0 || vials > 0) {
          reason = "Contracts ignore daggers & vials; set them to 0.";
        } else {
          valid = true;
        }
      } else {
        const total = dags + vials;
        if (dags <= 0) {
          reason = "Need at least 1 dagger.";
        } else if (total > 3) {
          reason = "Max 3 relics total (daggers + vials).";
        } else if (dags > getRelicBalance(ITEM.DAGGER)) {
          reason = "Not enough daggers.";
        } else if (vials > getRelicBalance(ITEM.VIAL)) {
          reason = "Not enough vials.";
        } else {
          valid = true;
        }
      }
    }

    // Computed success text
    let success = "";
    if (type === "cosmetic" && frags > 0) {
      success = `${getCosmeticSuccessChance(frags)}% success`;
      if (masks > 0) success += " • masks improve rarity";
    }
    if (type === "demon") {
      if (useSoulDeed) success = "Guaranteed Legendary demon";
      else if (useBindingContract) success = "Guaranteed Rare demon";
      else if (selectedCultist && (dags > 0 || vials > 0)) {
        success = `${getDemonSuccessChance(dags)}% success${
          vials > 0 ? " • vials improve tier" : ""
        }`;
      }
    }

    return { type, valid, reason, success };
  }, [
    selected,
    selectedCultist,
    useBindingContract,
    useSoulDeed,
    getRelicBalance,
  ]);

  // Auto-enforce exclusivity: if a contract/deed is enabled, clear dagger/vial counts
  const onToggleContract = (next) => {
    setUseBindingContract(next);
    if (next) {
      setUseSoulDeed(false);
      setCount(ITEM.DAGGER, 0);
      setCount(ITEM.VIAL, 0);
    }
  };
  const onToggleDeed = (next) => {
    setUseSoulDeed(next);
    if (next) {
      setUseBindingContract(false);
      setCount(ITEM.DAGGER, 0);
      setCount(ITEM.VIAL, 0);
    }
  };

  // Final sacrifice action
  const onFinalSacrifice = async () => {
    if (!ritual.type || !ritual.valid) {
      if (ritual.reason) toast.error(ritual.reason);
      return;
    }

    try {
      if (ritual.type === "keys") {
        const qty = selected[ITEM.KEYS] || 0;
        console.log('🔥 Attempting to sacrifice', qty, 'keys');
        const result = await sacrificeKeys(qty);
        console.log('🔥 Sacrifice result:', result);
        if (!result?.success) {
          toast.error(result?.message || "Key sacrifice failed");
        }
        // on success, callback handles UI reset
      }

      if (ritual.type === "cosmetic") {
        const frags = selected[ITEM.FRAGMENT] || 0;
        const masks = selected[ITEM.MASK] || 0;
        console.log('🔥 Attempting cosmetic sacrifice - frags:', frags, 'masks:', masks);
        const result = await sacrificeForCosmetic(frags, masks);
        console.log('🔥 Cosmetic result:', result);
        if (result?.success === undefined) {
          // non-standard failure case fallback
          toast.error(result?.message || "Cosmetic ritual failed");
        }
      }

      if (ritual.type === "demon") {
        if (!selectedCultist) {
          toast.error("Select a cultist");
          return;
        }
        const daggers = selected[ITEM.DAGGER] || 0;
        const vials = selected[ITEM.VIAL] || 0;
        console.log('🔥 Attempting demon sacrifice - daggers:', daggers, 'vials:', vials, 'cultist:', selectedCultist.id);

        const result = await sacrificeForDemon(
          daggers,
          vials,
          useBindingContract,
          useSoulDeed,
          selectedCultist.id
        );
        console.log('🔥 Demon result:', result);

        if (result?.success === undefined) {
          toast.error(result?.message || "Demon ritual failed");
        }
      }
    } catch (e) {
      console.error('🔥 Sacrifice error:', e);
      toast.error("Ritual failed to execute");
    }
    
    // Safety timeout to reset loading state
    setTimeout(() => {
      console.log('🔥 Timeout reset - if still loading, there was an issue');
    }, 10000);
  };

  // Derived UX helpers
  const hasAnySelection = Object.values(selected).some((x) => x > 0) || useBindingContract || useSoulDeed || !!selectedCultist;

  // Loading / connect gates
  if (!isConnected) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center bg-black text-gray-200">
        <h1 className="text-4xl mb-2">🩸 The Maw</h1>
        <p>Connect your wallet to feed the Maw...</p>
      </div>
    );
  }

  if (relicsLoading || cultistsLoading) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center bg-black text-gray-200">
        <h1 className="text-4xl mb-2">🩸 The Maw</h1>
        <p>Loading your offerings...</p>
      </div>
    );
  }

  // Owned counts
  const owned = {
    [ITEM.KEYS]: getRelicBalance(ITEM.KEYS),
    [ITEM.FRAGMENT]: getRelicBalance(ITEM.FRAGMENT),
    [ITEM.MASK]: getRelicBalance(ITEM.MASK),
    [ITEM.DAGGER]: getRelicBalance(ITEM.DAGGER),
    [ITEM.VIAL]: getRelicBalance(ITEM.VIAL),
    [ITEM.CONTRACT]: getRelicBalance(ITEM.CONTRACT),
    [ITEM.DEED]: getRelicBalance(ITEM.DEED),
  };

  return (
    <div 
      className="min-h-screen text-gray-100"
      style={{
        backgroundImage: `url('${BACKGROUND_URL}')`,
        backgroundColor: '#0a0a0a',
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        backgroundRepeat: 'no-repeat',
        position: 'relative'
      }}
    >
      {/* Subtle overlay to ensure text readability */}
      <div className="absolute inset-0 bg-black/20 pointer-events-none" />
      
      {/* CENTER: Main buttons */}
      <div style={{ 
        position: 'fixed', 
        left: '50%', 
        top: '50%', 
        transform: 'translate(-50%, -50%)',
        zIndex: 15
      }}>
        <div className="flex flex-col gap-4 items-center">
          {/* Approval button (only show if not approved) */}
          {!isApproved && (
            <button
              onClick={approveContract}
              disabled={isLoading}
              style={{
                padding: '16px 32px',
                borderRadius: '12px',
                fontWeight: 'bold',
                fontSize: '16px',
                backgroundColor: isLoading ? '#374151' : '#059669',
                color: isLoading ? '#9ca3af' : '#ffffff',
                border: '2px solid ' + (isLoading ? '#6b7280' : '#10b981'),
                cursor: isLoading ? 'not-allowed' : 'pointer',
                boxShadow: '0 0 20px rgba(16, 185, 129, 0.3), 0 4px 12px rgba(0, 0, 0, 0.3)',
                textShadow: '0 1px 2px rgba(0, 0, 0, 0.8)',
                transition: 'all 0.2s',
                width: 'auto',
                minWidth: '250px'
              }}
              onMouseEnter={(e) => {
                if (!isLoading) {
                  e.target.style.backgroundColor = '#047857';
                  e.target.style.borderColor = '#6ee7b7';
                }
              }}
              onMouseLeave={(e) => {
                if (!isLoading) {
                  e.target.style.backgroundColor = '#059669';
                  e.target.style.borderColor = '#10b981';
                }
              }}
            >
              {isLoading ? "APPROVING..." : "APPROVE CONTRACT"}
            </button>
          )}
          
          {/* Main sacrifice button */}
          <button
            onClick={onFinalSacrifice}
            disabled={isLoading || !ritual.type || !ritual.valid || !isApproved}
            style={{
              padding: '24px 48px',
              borderRadius: '16px',
              fontWeight: 'bold',
              fontSize: '20px',
              backgroundColor: isLoading || !ritual.type || !ritual.valid || !isApproved ? '#374151' : '#dc2626',
              color: isLoading || !ritual.type || !ritual.valid || !isApproved ? '#9ca3af' : '#ffffff',
              border: '2px solid ' + (isLoading || !ritual.type || !ritual.valid || !isApproved ? '#6b7280' : '#ef4444'),
              cursor: isLoading || !ritual.type || !ritual.valid || !isApproved ? 'not-allowed' : 'pointer',
              boxShadow: '0 0 30px rgba(220, 38, 38, 0.5), 0 8px 20px rgba(0, 0, 0, 0.3)',
              textShadow: '0 2px 4px rgba(0, 0, 0, 0.8)',
              transition: 'all 0.2s',
              width: 'auto',
              minWidth: '300px',
              opacity: !isApproved ? 0.6 : 1
            }}
            onMouseEnter={(e) => {
              if (!isLoading && ritual.type && ritual.valid && isApproved) {
                e.target.style.backgroundColor = '#b91c1c';
                e.target.style.borderColor = '#fca5a5';
              }
            }}
            onMouseLeave={(e) => {
              if (!isLoading && ritual.type && ritual.valid && isApproved) {
                e.target.style.backgroundColor = '#dc2626';
                e.target.style.borderColor = '#ef4444';
              }
            }}
          >
            {isLoading ? "OFFERING..." : 
             !isApproved ? "APPROVE FIRST" :
             "SACRIFICE TO THE MAW"}
          </button>
          
          {/* Approval status */}
          {isApproved && (
            <div className="text-sm text-green-400 font-semibold">
              ✅ Contract Approved
            </div>
          )}
        </div>
      </div>

      {/* TOP-CENTER: Offering summary */}
      <div className="fixed top-4 left-1/2 -translate-x-1/2 w-[96%] max-w-3xl" style={{ zIndex: 10 }}>
        <div className="rounded-2xl border border-white/10 bg-black/40 backdrop-blur-md p-3 md:p-4 shadow-lg">
          <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-2">
            <div className="text-sm md:text-base">
              <span className="font-semibold text-red-300">Offering:</span>{" "}
              {hasAnySelection ? (
                <span className="text-gray-200">
                  {selected[ITEM.KEYS] ? `${selected[ITEM.KEYS]} Keys • ` : ""}
                  {selected[ITEM.FRAGMENT] || selected[ITEM.MASK]
                    ? `${selected[ITEM.FRAGMENT] || 0} Fragments + ${selected[ITEM.MASK] || 0} Masks • `
                    : ""}
                  {selected[ITEM.DAGGER] || selected[ITEM.VIAL]
                    ? `${selected[ITEM.DAGGER] || 0} Daggers + ${selected[ITEM.VIAL] || 0} Vials • `
                    : ""}
                  {useBindingContract ? "Binding Contract • " : ""}
                  {useSoulDeed ? "Soul Deed • " : ""}
                  {selectedCultist ? `Cultist #${selectedCultist.id}` : ""}
                </span>
              ) : (
                <span className="text-gray-400">Nothing selected yet.</span>
              )}
            </div>
            <div className="text-sm md:text-base">
              {ritual.type ? (
                ritual.valid ? (
                  <span className="text-green-400">
                    {ritual.success || "Ready"}
                  </span>
                ) : (
                  <span className="text-yellow-300">{ritual.reason}</span>
                )
              ) : (
                <span className="text-gray-400">Select items to begin.</span>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* LEFT SIDEBAR INVENTORY */}
      <div className="fixed left-0 top-0 right-auto w-80 h-full p-4 overflow-y-auto" style={{ zIndex: 10, backgroundColor: 'rgba(0, 0, 0, 0.9)', width: '320px' }}>
        <h2 style={{ color: '#f3e8aa', fontSize: '20px', marginBottom: '16px', textAlign: 'center', fontWeight: 'bold' }}>INVENTORY</h2>
        <div className="space-y-3">
            <RailCard
              title={prettyName[ITEM.KEYS]}
              subtitle={selected[ITEM.KEYS] > 0 ? `${selected[ITEM.KEYS]}x keys → Random relics` : "Random relics"}
              icon={emoji[ITEM.KEYS]}
              itemId={ITEM.KEYS}
              owned={owned[ITEM.KEYS]}
              value={selected[ITEM.KEYS]}
              onChange={(v) => setCount(ITEM.KEYS, v)}
              disabled={isLoading}
              highlight={selected[ITEM.KEYS] > 0}
            />
            
            <RailCard
              title={prettyName[ITEM.FRAGMENT]}
              subtitle={selected[ITEM.FRAGMENT] > 0 ? `${getCosmeticSuccessChance(selected[ITEM.FRAGMENT])}% cosmetic success` : "Cosmetic success"}
              icon={emoji[ITEM.FRAGMENT]}
              itemId={ITEM.FRAGMENT}
              owned={owned[ITEM.FRAGMENT]}
              value={selected[ITEM.FRAGMENT]}
              onChange={(v) => setCount(ITEM.FRAGMENT, v)}
              disabled={isLoading}
              highlight={selected[ITEM.FRAGMENT] > 0}
            />
            
            <RailCard
              title={prettyName[ITEM.MASK]}
              subtitle={selected[ITEM.MASK] > 0 ? `+${selected[ITEM.MASK]} cosmetic rarity boost` : "Improves cosmetic rarity"}
              icon={emoji[ITEM.MASK]}
              itemId={ITEM.MASK}
              owned={owned[ITEM.MASK]}
              value={selected[ITEM.MASK]}
              onChange={(v) => setCount(ITEM.MASK, v)}
              disabled={isLoading}
              highlight={selected[ITEM.MASK] > 0}
            />
            
            <RailCard
              title={prettyName[ITEM.DAGGER]}
              subtitle={selected[ITEM.DAGGER] > 0 ? `${getDemonSuccessChance(selected[ITEM.DAGGER])}% demon success` : "Demon success"}
              icon={emoji[ITEM.DAGGER]}
              itemId={ITEM.DAGGER}
              owned={owned[ITEM.DAGGER]}
              value={selected[ITEM.DAGGER]}
              onChange={(v) => setCount(ITEM.DAGGER, v)}
              disabled={isLoading || useBindingContract || useSoulDeed}
              highlight={selected[ITEM.DAGGER] > 0}
            />
            
            <RailCard
              title={prettyName[ITEM.VIAL]}
              subtitle={selected[ITEM.VIAL] > 0 ? `+${selected[ITEM.VIAL]} demon tier boost` : "Improves demon tier"}
              icon={emoji[ITEM.VIAL]}
              itemId={ITEM.VIAL}
              owned={owned[ITEM.VIAL]}
              value={selected[ITEM.VIAL]}
              onChange={(v) => setCount(ITEM.VIAL, v)}
              disabled={isLoading || useBindingContract || useSoulDeed}
              highlight={selected[ITEM.VIAL] > 0}
            />
            
            <RailCard
              title={prettyName[ITEM.CONTRACT]}
              subtitle="Guarantees Rare demon"
              icon={emoji[ITEM.CONTRACT]}
              itemId={ITEM.CONTRACT}
              owned={owned[ITEM.CONTRACT]}
              value={useBindingContract ? 1 : 0}
              onChange={(v) => onToggleContract(v > 0)}
              disabled={isLoading}
              highlight={useBindingContract}
            />
            
            <RailCard
              title={prettyName[ITEM.DEED]}
              subtitle="Guarantees Legendary demon"
              icon={emoji[ITEM.DEED]}
              itemId={ITEM.DEED}
              owned={owned[ITEM.DEED]}
              value={useSoulDeed ? 1 : 0}
              onChange={(v) => onToggleDeed(v > 0)}
              disabled={isLoading}
              highlight={useSoulDeed}
            />
          
          <div className="border-t border-gray-600 pt-3">
            <h3 style={{ color: '#f3e8aa', fontSize: '16px', marginBottom: '12px', textAlign: 'center', fontWeight: 'bold' }}>CULTIST TO SACRIFICE</h3>
            <CultistPicker
              cultists={cultists}
              selected={selectedCultist}
              onSelect={setSelectedCultist}
            />
          </div>
          
          <button
            onClick={onFinalSacrifice}
            disabled={isLoading || !ritual.type || !ritual.valid}
            className="w-full px-6 py-3 rounded-xl font-bold bg-red-600 hover:bg-red-700 disabled:bg-gray-700 disabled:text-gray-300 shadow-lg transition"
          >
            {isLoading ? "Offering..." : "SACRIFICE"}
          </button>
        </div>
      </div>


      {/* REWARD MODAL */}
      <AnimatePresence>
        {showResultsModal && lastSacrificeResult && (
          <motion.div
            className="fixed inset-0 z-50 flex items-center justify-center p-4"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            style={{
              backgroundColor: "rgba(0,0,0,0.9)",
              backdropFilter: "blur(6px)",
            }}
            onClick={() => setShowResultsModal(false)}
          >
            <motion.div
              onClick={(e) => e.stopPropagation()}
              initial={{ scale: 0.9, y: 10 }}
              animate={{ scale: 1, y: 0 }}
              exit={{ scale: 0.95, y: 10 }}
              transition={{ type: "spring", stiffness: 220, damping: 18 }}
              className="relative w-full max-w-2xl rounded-3xl overflow-hidden border"
              style={{
                borderColor:
                  lastSacrificeResult.type === "rewards" ? "#8b5cf6" : "#ef4444",
                background:
                  lastSacrificeResult.type === "rewards"
                    ? "linear-gradient(135deg, #1a1a1a 0%, #2d1b69 50%, #1a1a1a 100%)"
                    : "linear-gradient(135deg, #1a1a1a 0%, #7f1d1d 50%, #1a1a1a 100%)",
                boxShadow:
                  lastSacrificeResult.type === "rewards"
                    ? "0 0 60px rgba(139, 92, 246, 0.35)"
                    : "0 0 60px rgba(239, 68, 68, 0.35)",
              }}
            >
              <button
                onClick={() => setShowResultsModal(false)}
                className="absolute top-3 right-3 text-2xl w-10 h-10 rounded-full hover:bg-white/10"
              >
                ×
              </button>
              <div className="p-8 text-center">
                {lastSacrificeResult.type === "rewards" ? (
                  <>
                    <div className="text-7xl mb-4">✨</div>
                    <h2 className="text-4xl font-bold text-purple-200 tracking-wide mb-2">
                      THE MAW REWARDS YOU
                    </h2>
                    <p className="text-gray-200 mb-6">
                      {lastSacrificeResult.message}
                    </p>

                    <div className="bg-black/40 border border-purple-400/30 rounded-2xl p-5 mb-6 text-left">
                      <div className="text-xl font-bold mb-3">You received:</div>
                      <div className="space-y-2">
                        {lastSacrificeResult.rewards?.map((rw, i) => (
                          <div
                            key={i}
                            className="flex items-center justify-between rounded-lg p-3 bg-gradient-to-r from-purple-900/20 to-blue-900/20 border border-purple-400/20"
                          >
                            <span className="text-lg">{rw.name}</span>
                            <span className="text-2xl font-bold text-yellow-400">
                              x{rw.quantity}
                            </span>
                          </div>
                        ))}
                      </div>
                    </div>
                  </>
                ) : (
                  <>
                    <div className="text-7xl mb-4">💀</div>
                    <h2 className="text-4xl font-bold text-red-300 tracking-wide mb-2">
                      THE MAW HUNGERS
                    </h2>
                    <p className="text-gray-200 mb-6">
                      {lastSacrificeResult.message}
                    </p>
                    <div className="bg-black/40 border border-red-400/30 rounded-2xl p-6 mb-6">
                      <div className="text-6xl mb-2">🌫️</div>
                      <div className="font-semibold">Nothing remains.</div>
                    </div>
                  </>
                )}

                {lastSacrificeResult.burned?.length > 0 && (
                  <div className="bg-black/30 border border-white/10 rounded-2xl p-5 mb-6 text-left">
                    <div className="text-red-300 font-bold mb-2">Consumed:</div>
                    <div className="space-y-1">
                      {lastSacrificeResult.burned.map((b, i) => (
                        <div key={i} className="flex justify-between text-sm">
                          <span>{b.name}</span> <span>x{b.quantity}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                <button
                  onClick={() => setShowResultsModal(false)}
                  className="px-8 py-3 rounded-xl bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 font-bold shadow"
                >
                  Continue
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}