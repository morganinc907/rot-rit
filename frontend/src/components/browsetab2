import {createHotContext as __vite__createHotContext} from "/@vite/client";
import.meta.hot = __vite__createHotContext("/src/components/CosmeticsBrowseTab.jsx");
import __vite__cjsImport0_react_jsxDevRuntime from "/node_modules/.vite/deps/react_jsx-dev-runtime.js?v=0a76a1dd";
const Fragment = __vite__cjsImport0_react_jsxDevRuntime["Fragment"];
const jsxDEV = __vite__cjsImport0_react_jsxDevRuntime["jsxDEV"];
import*as RefreshRuntime from "/@react-refresh";
const inWebWorker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
let prevRefreshReg;
let prevRefreshSig;
if (import.meta.hot && !inWebWorker) {
    if (!window.$RefreshReg$) {
        throw new Error("@vitejs/plugin-react can't detect preamble. Something is wrong.");
    }
    prevRefreshReg = window.$RefreshReg$;
    prevRefreshSig = window.$RefreshSig$;
    window.$RefreshReg$ = RefreshRuntime.getRefreshReg("/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx");
    window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;
}
var _s = $RefreshSig$();
import __vite__cjsImport3_react from "/node_modules/.vite/deps/react.js?v=0a76a1dd";
const React = __vite__cjsImport3_react.__esModule ? __vite__cjsImport3_react.default : __vite__cjsImport3_react;
const useState = __vite__cjsImport3_react["useState"];
const useEffect = __vite__cjsImport3_react["useEffect"];
import {motion, AnimatePresence} from "/node_modules/.vite/deps/framer-motion.js?v=0a76a1dd";
import CosmeticPreview from "/src/components/CosmeticPreview.jsx";
import RaccoonSelectorPanel from "/src/components/RaccoonSelectorPanel.jsx";
import CosmeticsGrid from "/src/components/CosmeticsGrid.jsx";
import {toast} from "/node_modules/.vite/deps/react-hot-toast.js?v=0a76a1dd";
import {useConfig, useAccount} from "/node_modules/.vite/deps/wagmi.js?v=0a76a1dd";
import {readContract, writeContract} from "/node_modules/.vite/deps/@wagmi_core.js?v=0a76a1dd";
import {useCosmeticsAddress} from "/src/hooks/useCosmetics.js";
import {ethers} from "/node_modules/.vite/deps/ethers.js?v=0a76a1dd";
import "/src/components/CosmeticsBrowseTab.css";
const SLOT_CONFIG = [{
    key: "head",
    label: "Head",
    icon: "H",
    description: "Hats & headwear"
}, {
    key: "face",
    label: "Face",
    icon: "F",
    description: "Masks & expressions"
}, {
    key: "body",
    label: "Body",
    icon: "B",
    description: "Clothing & armor"
}, {
    key: "color",
    label: "Fur",
    icon: "C",
    description: "Colors & patterns"
}, {
    key: "background",
    label: "BG",
    icon: "BG",
    description: "Backgrounds"
}];
export default function CosmeticsBrowseTab({raccoons=[], cosmetics=[], loading=false, bindCosmetic, equipCosmetic, getWardrobeCosmetics, refetchRaccoons}) {
    _s();
    const config = useConfig();
    const {address: account} = useAccount();
    const {address: cosmeticsAddress} = useCosmeticsAddress();
    const [selectedRaccoonId,setSelectedRaccoonId] = useState(null);
    const [selectedRaccoon,setSelectedRaccoon] = useState(null);
    const [isPanelOpen,setIsPanelOpen] = useState(false);
    const [selectedSlot,setSelectedSlot] = useState(null);
    const [previewCosmetics,setPreviewCosmetics] = useState({});
    const [hoverCosmetic,setHoverCosmetic] = useState(null);
    const [boundCosmeticIds,setBoundCosmeticIds] = useState(/* @__PURE__ */
    new Set());
    const [equippedCosmetics,setEquippedCosmetics] = useState({});
    useEffect( () => {
        if (raccoons.length > 0 && !selectedRaccoonId) {
            const firstRaccoon = raccoons[0];
            setSelectedRaccoonId(firstRaccoon.id);
            setSelectedRaccoon(firstRaccoon);
        }
    }
    , [raccoons, selectedRaccoonId]);
    useEffect( () => {
        if (selectedRaccoonId) {
            const raccoon = raccoons.find( (r) => r.id === selectedRaccoonId);
            console.log("🦝 Selected raccoon ID:", selectedRaccoonId);
            console.log("🦝 Found raccoon:", raccoon);
            setSelectedRaccoon(raccoon);
            fetchEquippedCosmetics(selectedRaccoonId);
            fetchBoundCosmetics(selectedRaccoonId);
        }
    }
    , [selectedRaccoonId, raccoons, cosmetics, cosmeticsAddress, account, config]);
    const fetchEquippedCosmetics = async (raccoonId) => {
        if (!raccoonId || !cosmeticsAddress || cosmetics.length === 0)
            return;
        console.log("👔 Fetching equipped cosmetics for raccoon", raccoonId);
        try {
            const equippedTypeIds = await readContract(config, {
                address: cosmeticsAddress,
                abi: [{
                    name: "getEquippedCosmetics",
                    type: "function",
                    stateMutability: "view",
                    inputs: [{
                        name: "raccoonId",
                        type: "uint256"
                    }],
                    outputs: [{
                        name: "",
                        type: "uint256[5]"
                    }]
                }],
                functionName: "getEquippedCosmetics",
                args: [BigInt(raccoonId)]
            });
            console.log("✅ Equipped type IDs:", equippedTypeIds.map( (id) => Number(id)));
            const equipped = {};
            const slotKeys = ["head", "face", "body", "color", "background"];
            for (let i = 0; i < 5; i++) {
                const typeId = Number(equippedTypeIds[i]);
                if (typeId > 0) {
                    const cosmetic = cosmetics.find( (c) => c.id === typeId);
                    if (cosmetic) {
                        equipped[slotKeys[i]] = cosmetic;
                        console.log(`   ${slotKeys[i]}: ${cosmetic.name} (ID ${typeId})`);
                    } else {
                        console.warn(`   ${slotKeys[i]}: Type ID ${typeId} not found in cosmetics list`);
                    }
                }
            }
            setEquippedCosmetics(equipped);
        } catch (error) {
            console.error("Error fetching equipped cosmetics:", error);
        }
    }
    ;
    const fetchBoundCosmetics = async (raccoonId) => {
        if (!raccoonId || !cosmeticsAddress || !account || cosmetics.length === 0)
            return;
        console.log("📋 Scanning for bound cosmetics for raccoon", raccoonId);
        const boundIds = /* @__PURE__ */
        new Set();
        const typeIdsToCheck = cosmetics.map( (c) => c.id).filter( (id) => id > 0);
        console.log(`🔍 Checking ${typeIdsToCheck.length} cosmetic type IDs for bound versions...`);
        for (const typeId of typeIdsToCheck) {
            try {
                const packed = ethers.solidityPacked(["string", "uint256", "uint256"], ["BOUND", typeId, raccoonId]);
                const hashId = BigInt(ethers.keccak256(packed));
                const BOUND_ID_OFFSET = 1000000000n;
                const maxUint256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
                const boundId = (hashId + BOUND_ID_OFFSET) % maxUint256;
                const balance = await readContract(config, {
                    address: cosmeticsAddress,
                    abi: [{
                        name: "balanceOf",
                        type: "function",
                        stateMutability: "view",
                        inputs: [{
                            name: "account",
                            type: "address"
                        }, {
                            name: "id",
                            type: "uint256"
                        }],
                        outputs: [{
                            name: "",
                            type: "uint256"
                        }]
                    }],
                    functionName: "balanceOf",
                    args: [account, boundId]
                });
                if (Number(balance) > 0) {
                    console.log(`✅ Found bound cosmetic: type ${typeId}`);
                    boundIds.add(typeId);
                }
            } catch (e) {}
        }
        console.log("✅ Bound cosmetic type IDs:", Array.from(boundIds));
        setBoundCosmeticIds(boundIds);
    }
    ;
    const handleRaccoonSelect = (raccoonId) => {
        setSelectedRaccoonId(raccoonId);
        setIsPanelOpen(false);
        setPreviewCosmetics({});
        setBoundCosmeticIds(/* @__PURE__ */
        new Set());
    }
    ;
    const handleSlotClick = (slotKey) => {
        if (selectedSlot === slotKey) {
            setSelectedSlot(null);
        } else {
            setSelectedSlot(slotKey);
        }
    }
    ;
    const handleCosmeticSelect = (cosmetic) => {
        const slotKey = SLOT_CONFIG[cosmetic.slot]?.key || cosmetic.slot;
        setPreviewCosmetics( (prev) => ({
            ...prev,
            [slotKey]: cosmetic
        }));
    }
    ;
    const handleReset = () => {
        setPreviewCosmetics({});
        toast.success("Preview reset");
    }
    ;
    const handleEquipAll = async () => {
        const cosmeticsToEquip = Object.values(previewCosmetics).filter(Boolean);
        if (cosmeticsToEquip.length === 0) {
            toast.error("No cosmetics selected");
            return;
        }
        const boundCosmetics = cosmeticsToEquip.filter( (c) => boundCosmeticIds.has(c.id));
        const unboundCosmetics = cosmeticsToEquip.filter( (c) => !boundCosmeticIds.has(c.id));
        if (unboundCosmetics.length === 0) {
            await handleEquipBoundCosmetics(boundCosmetics);
            return;
        }
        const confirmed = window.confirm(`${unboundCosmetics.length} cosmetic(s) need to be bound first.
${boundCosmetics.length} are already bound and will be equipped.

Binding is permanent and cannot be undone. Continue?`);
        if (!confirmed)
            return;
        await handleBindAndEquip(unboundCosmetics, boundCosmetics);
    }
    ;
    const handleEquipBoundCosmetics = async (cosmetics2) => {
        try {
            for (const cosmetic of cosmetics2) {
                const slotKey = SLOT_CONFIG[cosmetic.slot]?.key ?? cosmetic.slot;
                const slotIndex = SLOT_CONFIG.findIndex( (s) => s.key === slotKey);
                if (slotIndex === -1) {
                    console.warn("⚠️ Invalid slot index for cosmetic:", cosmetic);
                    continue;
                }
                const packed = ethers.solidityPacked(["string", "uint256", "uint256"], ["BOUND", cosmetic.id, selectedRaccoonId]);
                const hashId = BigInt(ethers.keccak256(packed));
                const BOUND_ID_OFFSET = 1000000000n;
                const maxUint256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
                const boundId = (hashId + BOUND_ID_OFFSET) % maxUint256;
                console.log("🎽 Equipping cosmetic by boundId:", {
                    raccoonId: selectedRaccoonId,
                    slot: slotIndex,
                    boundId: boundId.toString(),
                    cosmeticName: cosmetic.name
                });
                await writeContract(config, {
                    address: cosmeticsAddress,
                    abi: [{
                        name: "equipCosmeticById",
                        type: "function",
                        stateMutability: "nonpayable",
                        inputs: [{
                            name: "raccoonId",
                            type: "uint256"
                        }, {
                            name: "slot",
                            type: "uint8"
                        }, {
                            name: "boundId",
                            type: "uint256"
                        }],
                        outputs: []
                    }],
                    functionName: "equipCosmeticById",
                    args: [BigInt(selectedRaccoonId), slotIndex, boundId]
                });
                toast.success(`Equipped ${cosmetic.name}!`);
            }
            toast.success(`Successfully equipped ${cosmetics2.length} cosmetic(s)!`);
            setPreviewCosmetics({});
            console.log("🔄 Refreshing raccoon data to show equipped cosmetics...");
            setTimeout( () => {
                const cacheKey = `raccoon_metadata_${selectedRaccoonId}`;
                localStorage.removeItem(cacheKey);
                console.log(`🗑️ Cleared cache for raccoon #${selectedRaccoonId}`);
                fetchEquippedCosmetics(selectedRaccoonId);
                if (refetchRaccoons) {
                    refetchRaccoons();
                }
                toast.success("Cosmetics equipped!", {
                    duration: 2e3
                });
            }
            , 2e3);
        } catch (error) {
            console.error("Error equipping cosmetics:", error);
            toast.error("Failed to equip cosmetics: " + (error.message || "Unknown error"));
        }
    }
    ;
    const handleBindAndEquip = async (unboundCosmetics, boundCosmetics) => {
        try {
            for (const cosmetic of unboundCosmetics) {
                const bindResult = await bindCosmetic(selectedRaccoonId, cosmetic.id);
                console.log("🎯 Bind result:", bindResult);
                if (!bindResult?.success || bindResult.boundId === void 0) {
                    console.warn("⚠️ Skipping equip - binding did not return valid boundId");
                    continue;
                }
                const slotKey = SLOT_CONFIG[cosmetic.slot]?.key ?? cosmetic.slot;
                const slotIndex = SLOT_CONFIG.findIndex( (s) => s.key === slotKey);
                console.log("🔍 Mapped slot:", {
                    cosmetic,
                    slotKey,
                    slotIndex
                });
                if (slotIndex === -1) {
                    console.warn("⚠️ Invalid slot index for cosmetic:", cosmetic);
                    continue;
                }
                if (!getWardrobeCosmetics) {
                    console.warn("⚠️ getWardrobeCosmetics not available");
                    continue;
                }
                console.log("📥 Fetching wardrobe for raccoon", selectedRaccoonId, "slot", slotIndex);
                let wardrobeItems;
                try {
                    wardrobeItems = await getWardrobeCosmetics(selectedRaccoonId, slotIndex);
                    console.log("👔 Wardrobe items for slot", slotIndex, ":", wardrobeItems);
                } catch (wardrobeError) {
                    console.error("❌ Error fetching wardrobe:", wardrobeError);
                    toast.error("Failed to fetch wardrobe for equipping");
                    continue;
                }
                if (!wardrobeItems || wardrobeItems.length === 0) {
                    console.warn("⚠️ Wardrobe is empty for slot", slotIndex, "- waiting and retrying...");
                    await new Promise( (resolve) => setTimeout(resolve, 2e3));
                    try {
                        wardrobeItems = await getWardrobeCosmetics(selectedRaccoonId, slotIndex);
                        console.log("👔 Wardrobe items after retry:", wardrobeItems);
                    } catch (retryError) {
                        console.error("❌ Retry failed:", retryError);
                    }
                    if (!wardrobeItems || wardrobeItems.length === 0) {
                        console.warn("⚠️ Wardrobe still empty after retry");
                        toast("Cosmetic bound successfully (auto-equip skipped)", {
                            icon: "✅"
                        });
                        continue;
                    }
                }
                const wardrobeIndex = wardrobeItems.findIndex( (item) => BigInt(item.boundId) === BigInt(bindResult.boundId));
                if (wardrobeIndex !== -1) {
                    console.log("🎽 Equipping cosmetic:", {
                        raccoonId: selectedRaccoonId,
                        slotIndex,
                        wardrobeIndex
                    });
                    await equipCosmetic(selectedRaccoonId, slotIndex, wardrobeIndex);
                    toast.success("Cosmetic equipped!");
                } else {
                    console.warn("⚠️ Could not find bound cosmetic in wardrobe at slot", slotIndex, "boundId:", bindResult.boundId);
                    console.warn("Available boundIds:", wardrobeItems.map( (item) => item.boundId));
                    toast("Cosmetic bound successfully (auto-equip skipped)", {
                        icon: "✅"
                    });
                }
            }
            toast.success(`Successfully bound ${unboundCosmetics.length} cosmetic(s)!`);
            await fetchBoundCosmetics(selectedRaccoonId);
            const allToEquip = [...unboundCosmetics, ...boundCosmetics];
            await handleEquipBoundCosmetics(allToEquip);
            setPreviewCosmetics({});
        } catch (error) {
            console.error("Error binding cosmetics:", error);
            if (error.message?.includes("Approval transaction failed")) {
                toast.error("Transaction failed or rejected. Please try again.");
            } else if (error.message?.includes("User rejected")) {
                toast.error("Transaction rejected");
            } else {
                toast.error("Failed to bind cosmetics: " + (error.message || "Unknown error"));
            }
        }
    }
    ;
    const hasSelection = Object.keys(previewCosmetics).length > 0;
    return /* @__PURE__ */
    jsxDEV("div", {
        className: "cosmetics-browse-tab",
        children: [/* @__PURE__ */
        jsxDEV(RaccoonSelectorPanel, {
            isOpen: isPanelOpen,
            onClose: () => setIsPanelOpen(false),
            raccoons,
            selectedRaccoonId,
            onSelect: handleRaccoonSelect,
            loading
        }, void 0, false, {
            fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
            lineNumber: 431,
            columnNumber: 7
        }, this), /* @__PURE__ */
        jsxDEV("div", {
            className: "browse-content",
            children: [/* @__PURE__ */
            jsxDEV("div", {
                className: "preview-section",
                children: [/* @__PURE__ */
                jsxDEV("button", {
                    className: "raccoon-selector-button",
                    onClick: () => setIsPanelOpen(true),
                    children: [/* @__PURE__ */
                    jsxDEV("span", {
                        className: "menu-icon",
                        children: "≡"
                    }, void 0, false, {
                        fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                        lineNumber: 449,
                        columnNumber: 13
                    }, this), /* @__PURE__ */
                    jsxDEV("span", {
                        className: "raccoon-label",
                        children: selectedRaccoon ? `Raccoon #${selectedRaccoon.id}` : "Select Raccoon"
                    }, void 0, false, {
                        fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                        lineNumber: 450,
                        columnNumber: 13
                    }, this), /* @__PURE__ */
                    jsxDEV("span", {
                        className: "dropdown-icon",
                        children: "▾"
                    }, void 0, false, {
                        fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                        lineNumber: 453,
                        columnNumber: 13
                    }, this)]
                }, void 0, true, {
                    fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                    lineNumber: 445,
                    columnNumber: 11
                }, this), /* @__PURE__ */
                jsxDEV("div", {
                    className: "preview-container",
                    children: selectedRaccoon ? /* @__PURE__ */
                    jsxDEV(Fragment, {
                        children: [console.log("🎨 Rendering CosmeticPreview with:", {
                            selectedRaccoon,
                            equippedCosmetics,
                            previewCosmetics,
                            merged: {
                                ...equippedCosmetics,
                                ...previewCosmetics
                            }
                        }), /* @__PURE__ */
                        jsxDEV(CosmeticPreview, {
                            className: "cosmetic-preview-root",
                            raccoon: selectedRaccoon,
                            cosmetics: {
                                ...equippedCosmetics,
                                ...previewCosmetics
                            },
                            previewCosmetic: hoverCosmetic,
                            size: "xl",
                            showGlow: true
                        }, void 0, false, {
                            fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                            lineNumber: 466,
                            columnNumber: 17
                        }, this)]
                    }, void 0, true, {
                        fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                        lineNumber: 459,
                        columnNumber: 13
                    }, this) : /* @__PURE__ */
                    jsxDEV("div", {
                        className: "preview-empty",
                        children: [/* @__PURE__ */
                        jsxDEV("div", {
                            className: "empty-icon"
                        }, void 0, false, {
                            fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                            lineNumber: 477,
                            columnNumber: 17
                        }, this), /* @__PURE__ */
                        jsxDEV("p", {
                            children: "Select a raccoon to begin"
                        }, void 0, false, {
                            fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                            lineNumber: 478,
                            columnNumber: 17
                        }, this)]
                    }, void 0, true, {
                        fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                        lineNumber: 476,
                        columnNumber: 13
                    }, this)
                }, void 0, false, {
                    fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                    lineNumber: 457,
                    columnNumber: 11
                }, this), /* @__PURE__ */
                jsxDEV("div", {
                    className: "action-buttons",
                    children: [hasSelection && /* @__PURE__ */
                    jsxDEV(Fragment, {
                        children: [Object.values(previewCosmetics).filter(Boolean).some( (c) => !boundCosmeticIds.has(c.id)) && /* @__PURE__ */
                        jsxDEV("button", {
                            className: "btn-primary",
                            onClick: handleEquipAll,
                            disabled: !hasSelection,
                            children: ["Bind & Equip (", Object.keys(previewCosmetics).length, ")"]
                        }, void 0, true, {
                            fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                            lineNumber: 488,
                            columnNumber: 15
                        }, this), Object.values(previewCosmetics).filter(Boolean).every( (c) => boundCosmeticIds.has(c.id)) && /* @__PURE__ */
                        jsxDEV("button", {
                            className: "btn-primary",
                            onClick: handleEquipAll,
                            disabled: !hasSelection,
                            children: ["Equip (", Object.keys(previewCosmetics).length, ")"]
                        }, void 0, true, {
                            fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                            lineNumber: 497,
                            columnNumber: 15
                        }, this)]
                    }, void 0, true, {
                        fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                        lineNumber: 486,
                        columnNumber: 13
                    }, this), !hasSelection && /* @__PURE__ */
                    jsxDEV("button", {
                        className: "btn-primary",
                        disabled: true,
                        children: "Select Cosmetics"
                    }, void 0, false, {
                        fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                        lineNumber: 508,
                        columnNumber: 13
                    }, this), /* @__PURE__ */
                    jsxDEV("button", {
                        className: "btn-secondary",
                        onClick: handleReset,
                        disabled: !hasSelection,
                        children: "Reset"
                    }, void 0, false, {
                        fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                        lineNumber: 515,
                        columnNumber: 13
                    }, this)]
                }, void 0, true, {
                    fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                    lineNumber: 484,
                    columnNumber: 11
                }, this), /* @__PURE__ */
                jsxDEV("div", {
                    className: "wardrobe-slots-section",
                    children: [/* @__PURE__ */
                    jsxDEV("h3", {
                        className: "section-title",
                        children: "Try On Cosmetics"
                    }, void 0, false, {
                        fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                        lineNumber: 526,
                        columnNumber: 13
                    }, this), /* @__PURE__ */
                    jsxDEV("div", {
                        className: "wardrobe-slots",
                        children: SLOT_CONFIG.map( (slot) => {
                            const equipped = previewCosmetics[slot.key];
                            const isActive = selectedSlot === slot.key;
                            return /* @__PURE__ */
                            jsxDEV(motion.div, {
                                className: `slot-card ${isActive ? "active" : ""} ${equipped ? "has-cosmetic" : ""}`,
                                onClick: () => handleSlotClick(slot.key),
                                whileHover: {
                                    scale: 1.05
                                },
                                whileTap: {
                                    scale: 0.95
                                },
                                children: [equipped ? /* @__PURE__ */
                                jsxDEV("div", {
                                    className: "slot-preview",
                                    children: /* @__PURE__ */
                                    jsxDEV("img", {
                                        src: equipped.image,
                                        alt: equipped.name,
                                        className: "slot-image"
                                    }, void 0, false, {
                                        fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                                        lineNumber: 542,
                                        columnNumber: 25
                                    }, this)
                                }, void 0, false, {
                                    fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                                    lineNumber: 541,
                                    columnNumber: 21
                                }, this) : /* @__PURE__ */
                                jsxDEV("div", {
                                    className: "slot-empty",
                                    children: /* @__PURE__ */
                                    jsxDEV("span", {
                                        className: "slot-icon",
                                        children: slot.label
                                    }, void 0, false, {
                                        fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                                        lineNumber: 550,
                                        columnNumber: 25
                                    }, this)
                                }, void 0, false, {
                                    fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                                    lineNumber: 549,
                                    columnNumber: 21
                                }, this), /* @__PURE__ */
                                jsxDEV("div", {
                                    className: "slot-label",
                                    children: /* @__PURE__ */
                                    jsxDEV("span", {
                                        className: "slot-name",
                                        children: slot.label
                                    }, void 0, false, {
                                        fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                                        lineNumber: 554,
                                        columnNumber: 23
                                    }, this)
                                }, void 0, false, {
                                    fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                                    lineNumber: 553,
                                    columnNumber: 21
                                }, this)]
                            }, slot.key, true, {
                                fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                                lineNumber: 533,
                                columnNumber: 19
                            }, this);
                        }
                        )
                    }, void 0, false, {
                        fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                        lineNumber: 527,
                        columnNumber: 13
                    }, this), selectedSlot && /* @__PURE__ */
                    jsxDEV("div", {
                        className: "filter-indicator",
                        children: [/* @__PURE__ */
                        jsxDEV("span", {
                            children: ["Showing: ", SLOT_CONFIG.find( (s) => s.key === selectedSlot)?.label, " cosmetics"]
                        }, void 0, true, {
                            fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                            lineNumber: 562,
                            columnNumber: 17
                        }, this), /* @__PURE__ */
                        jsxDEV("button", {
                            className: "clear-filter",
                            onClick: () => setSelectedSlot(null),
                            children: "Show All"
                        }, void 0, false, {
                            fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                            lineNumber: 565,
                            columnNumber: 17
                        }, this)]
                    }, void 0, true, {
                        fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                        lineNumber: 561,
                        columnNumber: 13
                    }, this)]
                }, void 0, true, {
                    fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                    lineNumber: 525,
                    columnNumber: 11
                }, this)]
            }, void 0, true, {
                fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                lineNumber: 443,
                columnNumber: 9
            }, this), /* @__PURE__ */
            jsxDEV(CosmeticsGrid, {
                cosmetics,
                selectedSlot,
                equippedCosmetics: previewCosmetics,
                onCosmeticSelect: handleCosmeticSelect,
                onCosmeticHover: setHoverCosmetic,
                boundCosmeticIds
            }, void 0, false, {
                fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
                lineNumber: 577,
                columnNumber: 9
            }, this)]
        }, void 0, true, {
            fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
            lineNumber: 441,
            columnNumber: 7
        }, this)]
    }, void 0, true, {
        fileName: "/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx",
        lineNumber: 429,
        columnNumber: 5
    }, this);
}
_s(CosmeticsBrowseTab, "V7BiF468yV0Yb5t7LACUHKsghLE=", false, function() {
    return [useConfig, useAccount, useCosmeticsAddress];
});
_c = CosmeticsBrowseTab;
var _c;
$RefreshReg$(_c, "CosmeticsBrowseTab");
if (import.meta.hot && !inWebWorker) {
    window.$RefreshReg$ = prevRefreshReg;
    window.$RefreshSig$ = prevRefreshSig;
}
if (import.meta.hot && !inWebWorker) {
    RefreshRuntime.__hmr_import(import.meta.url).then( (currentExports) => {
        RefreshRuntime.registerExportsForReactRefresh("/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx", currentExports);
        import.meta.hot.accept( (nextExports) => {
            if (!nextExports)
                return;
            const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("/Users/seanmorgan/Desktop/rot-ritual-organized/frontend/src/components/CosmeticsBrowseTab.jsx", currentExports, nextExports);
            if (invalidateMessage)
                import.meta.hot.invalidate(invalidateMessage);
        }
        );
    }
    );
}

//# sourceMappingURL=data:application/json;base64,
